install.packages("KernSmooth")
R.version.string
install.packages("swirl")
packageVersion("swirl")
install.packages("swirl")
install.packages("swirl", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("swirl", repos="http://cran.rstudio.com/", dependencies=TRUE, type="source")
chooseCRANmirror()
install.packages("swirl")
R.version.string
install.packages("stringi")
library(swirl)
R.version.string
sessionInfo()
install.packages("stringi", type = "source")
Sys.setlocale("LC_ALL","English")
library(swirl);swirl()
install.packages(file.choose(), repos=NULL)
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
swirl
swirl()
library(swirl)
swirl()
getwd()
ls()
0
swirl()
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
set(along.with=my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- (0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char,"Enrico")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep=" ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS,1:4,sep="-")
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
[-c(2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11,bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
swirl
swirl
library("swirl")
swirl()
2
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 ==
| 6, !FALSE)
xor(5 ==6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(int<0)
any(ints<0)
any(ints>0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evauate(stdev,c(1.4, 3.6, 7.9, 8.8))
evaluate(stdev,c(1.4, 3.6, 7.9, 8.8))
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x(1)}, c(8,4,0))
evaluate(function(x){x(1)}, x=c(8,4,0))
evaluate(function(x){x(1)}, dat=c(8,4,0))
evaluate(function(x){x(0)}, c(8,4,0))
a=c(8,4,0)
a(1)
evaluate(function(x){x[1], c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[end]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello")
submit()
mad_libs("New York","many","dean")
submit()
submit()
'I' %p% 'love' %p% 'R'
('I' %p% 'love') %p% 'R'
"I" %p% "love" %p% "R"
info()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.tme()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(t1)
weekday(t1)
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
